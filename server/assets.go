// Code generated by go-bindata.
// sources:
// assets/index.tpl
// DO NOT EDIT!

package server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x5d\x6b\xdb\x30\x14\x7d\x5e\x7e\xc5\x9d\x60\xd0\xd2\x3a\x4a\xc6\x36\x86\xa3\x18\x4a\x3b\x58\xa1\x5d\x4b\xd3\x3e\x8c\xb1\x07\xc5\x52\xed\x0b\xf2\x07\xd2\x4d\xdb\xcc\xf8\xbf\x0f\xd9\x71\xec\xa4\xed\xf6\x32\xe6\x17\x49\xf7\xe3\xe8\x5c\x9f\x63\x8b\xb7\x67\x57\xa7\xb7\xdf\xaf\xbf\x40\x4a\x99\x89\x46\xa2\x5b\xb4\x54\xd1\x08\x00\x40\x64\x9a\x24\xc4\xa9\xb4\x4e\xd3\x9c\xad\xe8\x3e\xf8\xcc\x80\x6f\x92\x84\x64\x74\x84\x99\x4c\x74\x50\x94\x84\x99\xe0\x6d\xa8\x4d\x3b\x5a\x1b\x0d\xb4\x2e\xf5\x9c\x91\x7e\x22\x1e\x3b\xc7\xda\x1c\x34\x37\x1e\xc3\xb2\x50\x6b\xa8\x36\x21\x80\x47\x54\x94\x86\x30\x9d\x4c\xde\xcd\xb6\xc1\x54\x63\x92\xd2\x7e\x34\x93\x36\xc1\x3c\x84\x49\x1f\x2a\xa5\x52\x98\x27\x83\x58\x3d\xb8\x6c\x70\x8d\x42\x57\x1a\xb9\x0e\x81\xe4\xd2\xe8\xfd\xe2\x3d\x4e\xbb\xc5\x41\xac\x8d\xe9\xaf\xf4\x63\x05\xd2\x60\x92\x87\x10\xeb\x9c\xb4\xdd\x47\x6b\xba\xa0\x1a\xbd\xe9\xc0\xad\xd2\x36\x88\x0b\x63\x64\xe9\x74\x08\xdd\xee\x59\x9f\xda\x6f\x0a\xc1\x15\x06\x15\x4c\xcb\xa7\x59\x97\xe9\x47\x1e\x7f\xd4\x59\x8f\xd1\xa2\x08\xde\x48\x10\x8d\x04\x6f\x25\x15\x7e\xb6\x8d\x3a\xe9\x74\x57\xb9\x74\xba\x49\x28\x7c\xd8\x0a\x68\x8b\x3c\x89\xee\x6e\x2e\x00\x9d\x07\x6b\x8e\x62\x69\xdb\x7c\x18\x74\xcf\x3f\xda\x6d\x91\xc5\x09\x7c\xb5\xfa\x7e\xce\xaa\x6a\x7c\x77\x73\x51\xd7\x2c\xea\x76\x82\x9f\xf4\x0c\xfa\x0d\xef\x59\x3f\xe3\x7f\x5a\x64\x99\xcc\x95\xfb\xdf\x43\xb8\xd8\x62\x49\x9d\xe1\xef\x0b\x0b\x07\x0f\xd2\x02\xc2\x1c\x26\x33\x40\x10\x50\x55\xe3\x8e\x5c\x5d\x8f\x8d\xce\x13\x4a\x67\x80\x47\x47\x87\x03\xff\x15\xf1\x2a\xd3\x39\x8d\x1f\x2d\x92\x3e\xd8\x69\xf9\x81\x3f\x0f\x67\xaf\x55\x32\xcf\x84\x1d\xee\x1a\x8b\x73\x08\x82\xee\x9d\x0d\x09\xbe\xf6\x2a\xa1\x71\xf7\x9c\xb5\xee\x66\xdd\x97\xef\x5d\xdd\x4d\x26\xc8\x46\x5b\x12\x82\x54\x24\x30\x4b\xc0\xd9\x78\xce\x94\x24\x19\x56\xd5\xf8\xca\x62\x82\xb9\x34\x97\x98\xe9\xdb\x75\xa9\xeb\x7a\xb6\x94\x4e\x7f\xfa\x70\x3c\x48\x9e\x7b\x3b\x7a\xad\x05\x27\xf5\x37\xc4\x33\x47\x2f\x82\x9d\x39\x7a\x11\x47\xf0\x9e\xe5\x33\xc2\x1d\x83\x26\x30\x60\xb4\xc0\x5f\xda\x5b\x6e\x9f\xce\xd5\x8a\xca\x15\x6d\xab\x9b\x53\x5b\xdb\xca\x53\x5a\xed\x1c\x2e\xd1\x20\xad\x77\xfb\xff\x44\xc3\xff\x0b\x5c\x29\xf3\x39\x7b\xcf\xa2\xc5\xe2\xfc\xd2\xcf\xe9\xd7\xba\x86\xeb\xc5\xb7\x1b\x7f\xf4\xeb\x6b\x88\x82\x0f\x64\xd9\xc8\x28\x78\xfb\xc9\x0b\xde\xfc\xdb\x7f\x07\x00\x00\xff\xff\xc4\x91\x1f\xec\xf2\x05\x00\x00")

func assetsIndexTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexTpl,
		"assets/index.tpl",
	)
}

func assetsIndexTpl() (*asset, error) {
	bytes, err := assetsIndexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.tpl", size: 1522, mode: os.FileMode(420), modTime: time.Unix(1507202407, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.tpl": assetsIndexTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.tpl": &bintree{assetsIndexTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

